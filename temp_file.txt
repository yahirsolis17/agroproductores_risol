// frontend/src/modules/gestion_bodega/services/capturasService.ts
import api from "../../../global/api/apiClient";
import { handleBackendNotification } from "../../../global/utils/NotificationEngine";
import type {
  PaginationMeta,
  Captura,
  CapturaCreateDTO,
  CapturaUpdateDTO,
  CapturaPatchDTO,
  CapturasListResponse,
  CapturaSingleResponse,
  CapturaListParams,
} from "../types/capturasTypes";

// Backend expone /bodega/recepciones/, acciones: archivar/restaurar
const BASE = "/bodega/recepciones/";

// -------------------------------
// Normalizadores
// -------------------------------
function normalizeMeta(raw: any): PaginationMeta {
  if (!raw) {
    return {
      count: 0,
      next: null,
      previous: null,
      page: null,
      page_size: null,
      total_pages: null,
    };
  }
  // Envelope con meta extendido
  if (
    typeof raw.page !== "undefined" ||
    typeof raw.page_size !== "undefined" ||
    typeof raw.total_pages !== "undefined"
  ) {
    return {
      count: raw.count ?? 0,
      next: raw.next ?? null,
      previous: raw.previous ?? null,
      page: raw.page ?? null,
      page_size: raw.page_size ?? null,
      total_pages: raw.total_pages ?? null,
    };
  }
  // DRF puro
  return {
    count: raw.count ?? 0,
    next: raw.next ?? null,
    previous: raw.previous ?? null,
    page: null,
    page_size: null,
    total_pages: null,
  };
}

// Unifica envelope { data: { recepciones, meta } } o DRF { results, count, next, previous }
function normalizeListPayload(res: any): CapturasListResponse {
  handleBackendNotification(res?.data);

  const dataLayer = res?.data?.data ?? res?.data ?? {};
  const capturas: Captura[] =
    // alias backend (recepciones) â†’ FE (capturas)
    dataLayer.recepciones ??
    dataLayer.capturas ?? // por si el BE viniera ya renombrado en algÃºn punto
    dataLayer.results ??
    [];

  const metaRaw =
    dataLayer.meta ??
    (("count" in dataLayer || "next" in dataLayer || "previous" in dataLayer)
      ? dataLayer
      : undefined);

  return { capturas, meta: normalizeMeta(metaRaw) };
}

// Unifica envelope { data: { recepcion } } â†’ FE { captura }
function normalizeSinglePayload(res: any): CapturaSingleResponse {
  handleBackendNotification(res?.data);

  const dataLayer = res?.data?.data ?? res?.data ?? {};
  const captura: Captura =
    dataLayer.recepcion ?? // backend actual
    dataLayer.captura ??   // alias futuro
    dataLayer.item ??      // fallback
    dataLayer;

  return { captura };
}

// -------------------------------
// Query builder
// -------------------------------
function buildQuery(params: CapturaListParams = {}): Record<string, any> {
  const q: Record<string, any> = {};

  if (params.page) q.page = params.page;
  if (params.page_size) q.page_size = params.page_size;
  if (params.ordering) q.ordering = params.ordering;

  if (params.estado && params.estado !== "todas") q.estado = params.estado;

  if (params.bodega) q.bodega = params.bodega;
  if (params.temporada) q.temporada = params.temporada;

  if (params.search) q.search = params.search;
  if (params.tipo_mango) q.tipo_mango = params.tipo_mango;

  if (params.fecha) q.fecha = params.fecha;
  if (params.fecha_gte) q["fecha__gte"] = params.fecha_gte;
  if (params.fecha_lte) q["fecha__lte"] = params.fecha_lte;

  return q;
}

// -------------------------------
// Service
// -------------------------------
export const capturasService = {
  async list(params: CapturaListParams = {}): Promise<CapturasListResponse> {
    try {
      const res = await api.get(BASE, { params: buildQuery(params) });
      return normalizeListPayload(res);
    } catch (err: any) {
      handleBackendNotification(err?.response?.data);
      throw err;
    }
  },

  async retrieve(id: number): Promise<CapturaSingleResponse> {
    try {
      const res = await api.get(`${BASE}${id}/`);
      return normalizeSinglePayload(res);
    } catch (err: any) {
      handleBackendNotification(err?.response?.data);
      throw err;
    }
  },

  async create(payload: CapturaCreateDTO): Promise<CapturaSingleResponse> {
    try {
      const res = await api.post(BASE, payload);
      return normalizeSinglePayload(res);
    } catch (err: any) {
      handleBackendNotification(err?.response?.data);
      throw err;
    }
  },

  async update(id: number, payload: CapturaUpdateDTO): Promise<CapturaSingleResponse> {
    try {
      const res = await api.put(`${BASE}${id}/`, payload);
      return normalizeSinglePayload(res);
    } catch (err: any) {
      handleBackendNotification(err?.response?.data);
      throw err;
    }
  },

  async patch(id: number, payload: CapturaPatchDTO): Promise<CapturaSingleResponse> {
    try {
      const res = await api.patch(`${BASE}${id}/`, payload);
      return normalizeSinglePayload(res);
    } catch (err: any) {
      handleBackendNotification(err?.response?.data);
      throw err;
    }
  },

  async archivar(id: number): Promise<{ captura_id: number } & Partial<CapturaSingleResponse>> {
    try {
      const res = await api.post(`${BASE}${id}/archivar/`);
      handleBackendNotification(res?.data);

      const dataLayer = res?.data?.data ?? {};
      // puede venir { recepcion_id } o { recepcion }
      if (dataLayer.recepcion) {
        return { captura_id: dataLayer.recepcion.id, captura: dataLayer.recepcion };
      }
      // por si en algÃºn momento el BE cambia a captura_id
      if (dataLayer.captura) {
        return { captura_id: dataLayer.captura.id, captura: dataLayer.captura };
      }
      return { captura_id: dataLayer.recepcion_id ?? dataLayer.captura_id ?? id };
    } catch (err: any) {
      handleBackendNotification(err?.response?.data);
      throw err;
    }
  },

  async restaurar(id: number): Promise<CapturaSingleResponse> {
    try {
      const res = await api.post(`${BASE}${id}/restaurar/`);
      return normalizeSinglePayload(res);
    } catch (err: any) {
      handleBackendNotification(err?.response?.data);
      throw err;
    }
  },

  async remove(id: number): Promise<{ deleted_id: number }> {
    try {
      const res = await api.delete(`${BASE}${id}/`);
      handleBackendNotification(res?.data);
      const dataLayer = res?.data?.data ?? {};
      return { deleted_id: dataLayer.deleted_id ?? id };
    } catch (err: any) {
      handleBackendNotification(err?.response?.data);
      throw err;
    }
  },
};

export default capturasService;
