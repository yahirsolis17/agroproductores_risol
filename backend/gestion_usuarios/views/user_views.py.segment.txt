# ===== Parches de permisos: etiquetas, filtrado y overrides =====
# Extiende etiquetas de modelos y acciones para el catálogo filtrado
try:
    _MODEL_LABELS.update({
        'bodega': 'Bodegas',
        'temporadabodega': 'Temporadas de bodega',
        'cliente': 'Clientes',
        'recepcion': 'Recepciones',
        'clasificacionempaque': 'Clasificación empaque',
        'pedido': 'Pedidos',
        'camionsalida': 'Camiones',
        'consumible': 'Consumibles',
    })
    _ACTION_LABELS.update({
        'exportpdf': 'Exportar a PDF',
        'exportexcel': 'Exportar a Excel',
    })
except Exception:
    pass

# Prefijos y apps permitidas en API de permisos
ALLOWED_APP_LABELS = {'gestion_usuarios', 'gestion_huerta', 'gestion_bodega'}
ALLOWED_PREFIXES = (
    'add_', 'change_', 'delete_', 'view_',
    'archive_', 'restore_', 'finalize_', 'reactivate_',
    'exportpdf_', 'exportexcel_',
)

def _catalog_queryset():  # type: ignore[no-redef]
    regex = r'^(add_|change_|delete_|view_|archive_|restore_|finalize_|reactivate_|exportpdf_|exportexcel_)'
    return (
        Permission.objects.select_related('content_type')
        .filter(
            content_type__app_label__in=ALLOWED_APP_LABELS,
            codename__regex=regex,
        )
        .order_by('content_type__app_label', 'content_type__model', 'codename')
    )

# Ajusta PermisoViewSet para usar el catálogo filtrado
try:
    def _permiso_get_queryset(self):  # noqa: ANN001
        return _catalog_queryset()
    PermisoViewSet.get_queryset = _permiso_get_queryset  # type: ignore[attr-defined]
    if hasattr(PermisoViewSet, 'queryset'):
        delattr(PermisoViewSet, 'queryset')
except Exception:
    pass

# Filtra permisos devueltos al usuario autenticado
try:
    _orig_userperms_get = UserPermissionsView.get  # type: ignore[attr-defined]
    def _userperms_get(self, request):  # noqa: ANN001
        dotted = list(request.user.get_all_permissions())
        filtered = []
        for p in dotted:
            if not p or '.' not in p:
                continue
            app, code = p.split('.', 1)
            if app in ALLOWED_APP_LABELS and any(code.startswith(pref) for pref in ALLOWED_PREFIXES):
                filtered.append(p)
        plains = _to_plain(filtered)
        return Response({"permissions": plains})
    UserPermissionsView.get = _userperms_get  # type: ignore[attr-defined]
except Exception:
    pass
